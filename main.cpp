#include <iostream>
#include <opencv2/core/types.hpp>
#include <opencv2/highgui.hpp>
#include <opencv2/imgproc.hpp>
#include <opencv2/opencv.hpp>
#include <string>

#include "ProgramArguments.h"
#include "VersionConfig.h"  //This file will be generated by cmake. By processing VersionConfig.in.h

int main(int argc, char* argv[]) {
  std::cout << "vgen Version"
            << " " << VERSION_MAJOR << "." << VERSION_MINOR << "."
            << VERSION_PATCH << std::endl;

  // We need at least one argument. The file from which we will generate a
  // video.
  // if (argc != 2) {
  //  std::cout << "Usage: vgen <filename>" << std::endl;
  //  return -1;
  //}

  ProgramOptions options;

  if (argc == 2) {
    options.filename = argv[1];
  } else {
    // Parse all arguments. This is a simple concept. If
    for (int i = 1; i < argc; i++) {
      std::string token = argv[i];
      if (token == "-w" || token == "--width") {
        std::cout << "Width is: " << std::stoi(argv[i + 1]) << std::endl;
        options.Width = std::stoi(argv[i + 1]);
        if (options.Width <= 0) {
          options.Width = 720;
        }
        continue;
      }

      if (token == "-h" || token == "--height") {
        std::cout << "Height is: " << std::stoi(argv[i + 1]) << std::endl;
        options.Height = std::stoi(argv[i + 1]);
        if (options.Height <= 0) {
          options.Height = 720;
        }
        continue;
      }

      if (token == "--help") {
        std::cout << "Print help" << std::endl;
      }
    }
    options.filename = argv[argc - 1];
  }

  // Tests of Video Writer
  // cv::VideoWriter
  // writer("test.avi",cv::VideoWriter::fourcc('H','2','6','4'),30,cv::Size(720,576),false);
  // cv::VideoWriter
  // writer("test.avi",cv::VideoWriter::fourcc('R','G','B','A'),30,cv::Size(720,576),false);
  //
  cv::VideoWriter writer(options.filename,
                         cv::VideoWriter::fourcc('M', 'P', 'G', '3'), 30,
                         cv::Size(options.Width, options.Height), false);

  if (!writer.isOpened()) {
    std::cout << "Could not open video writer!" << std::endl;
  }

  // Asuming that there are 30 frames per second
  int seconds = options.secDuration;
  int fps     = options.FPS;
	int totalFrames = (fps*seconds);
  for (int i = 0; i < totalFrames; i++) {
		std::cout << "Writing Frame " << (i+1) << " of " << totalFrames << " to file " << options.filename <<"\r";
    // Unsigned 8 bit color depth with one channel declared by CV_8UC1
    cv::Mat frame = cv::Mat::zeros(options.Height, options.Width, CV_8UC1);
    int xpos      = 20 + i;
    if (xpos > options.Width) {
      xpos = xpos - options.Width;
    }
    int ypos = 20;
    // Create a rectangle 50px x 50px
    cv::Rect rec(xpos, ypos, 50, 50);
    cv::Scalar cvWhite(255);

    // Write the rectangle to the frame -1 indicates that it must be filled with
    // the color
    cv::rectangle(frame, rec, cvWhite, -1);
    writer << frame;
  }
  writer.release();

  // cv::namedWindow("Display Image", cv::WINDOW_AUTOSIZE);
  // cv::imshow("Display Image", image);
  // cv::waitKey(0);
}
